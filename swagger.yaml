swagger: "2.0"
info:
  description: "This is a simple system used for the managment of the students ' exams and assignments."
  version: "2.0.0"
  title: "SSC Project"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "ssc-project.herokuapp.com"
basePath: "/"
tags:
- name: "login"
  description: "Everything about the login"
- name: "home"
  description: "First page shown"
- name: "exams"
  description: "Everything about the exams"
- name: "assignments"
  description: "Everything about the assignments"
- name: "students"
  description: "Everything about the students"
- name: "professors"
  description: "Everything about the professors"
schemes:
- "https"
- "http"
paths:
  /login-studenti:
    post:
      tags:
      - "login"
      summary: "Allows a student to log in using his credentials"
      description: "The student inserts into the body of the request the username, with key 'name', and the password, using the key 'password'. If the user is found in the system then it will return a token that will be used to access the resources, otherwise it will return an error, saying that the user was not found."
      operationId: "logStudent"
      produces:
      - "application/json"
        
      responses:
        401:
          description: "Unauthorized"
        200:
          description: "Successful operation"
          schema:
            type: "object"
            properties:
              success:
                type: "boolean"
              message:
                type: "string"
              token:
                type: "string"
          
  /login-docenti:
    post:
      tags:
      - "login"
      summary: "Allows a professot to log in using his credentials"
      description: "The professor inserts into the body of the request the username, with key 'name', and the password, using the key 'password'. If the user is found in the system then it will return a token that will be used to access the resources, otherwise it will return an error, saying that the user was not found."
      operationId: "logProfessor"
      produces:
      - "application/json"
        
      responses:
        401:
          description: "Unauthorized"
        200:
          description: "Successful operation"
          schema:
            type: "object"
            properties:
              success:
                type: "boolean"
              message:
                type: "string"
              token:
                type: "string"

  /home:
    get:
      tags:
      - "home"
      summary: "Gets a list of the paths to the resources"
      description: "The page displays a list of paths representing the location of the various resources. To access them either a student or a professor needs to use their token."
      operationId: "getHome"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                description: "The path to a resource"
        404:
          description: "Server not found"
          
  /home/exams:
    get:
      tags:
      - "exams"
      summary: "Gets a list of the avaiable exams"
      description: "The resource shows all possible exams that a student can take. It requires the use of the token provided after the login as parameter of the request."
      operationId: "getExams"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "object"
            properties:
              id:
                type: "integer"
              name:
                type: "string"
              data:
                type: "string"
        404:
          description: "Server not found"
        401:
          description: "Unauthorized"
    post:
      tags:
      - "exams"
      summary: "Adds a new exam to the list"
      description: "The post action can be done only by a teacher, infact if a student tries to add a new exam he will be blocked. It requires in the body the name of the exam and the date in which it will be done."
      operationId: "postExams"
      produces:
      - "application/json"
      responses:
        201:
          description: "Successful operation"
          schema:
            type: "object"
            properties:
              id:
                type: "integer"
              name:
                type: "string"
              data:
                type: "string"
        404:
          description: "Server not found"
        400:
          description: "Bad syntax: missing parameters"
        401:
          description: "Unauthorized"
          
  /home/exams/{id}:
    get:
      tags:
      - "exams"
      summary: "Gets a specific exam"
      description: "The resource shows the specific exam identified by the field id. It requires the use of the token provided after the login as parameter of the request."
      operationId: "getExamsId"
      produces:
      - "application/json"
      parameters:
        - name: id
          in: path
          description: ID of exam to fetch
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "object"
            properties:
              id:
                type: "integer"
              name:
                type: "string"
              data:
                type: "string"
        404:
          description: "Server not found"
        401:
          description: "Unauthorized"
    put:
      tags:
      - "exams"
      summary: "Modifies an existing exam"
      description: "The put action can be done only by a teacher, infact if a student tries to modify an exam he will be blocked. It requires in the body the name of the exam and the date in which it will be done."
      operationId: "putExamsId"
      produces:
      - "application/json"
      parameters:
        - name: id
          in: path
          description: ID of exam to fetch
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "object"
            properties:
              id:
                type: "integer"
              name:
                type: "string"
              data:
                type: "string"
        404:
          description: "Server not found"
        400:
          description: "Bad syntax: missing parameters"
        401:
          description: "Unauthorized"
    delete:
      tags: 
      - "exams"
      summary: "Deletes a specific exam"
      description: "The delete action can be done only by a teacher, infact if a student tries to delete an exam he will be blocked. Given the id of the choosen exam, the system will delete it from the existing exams."
      operationId: "deleteExamsId"
      produces:
      - "application/json"
      parameters:
        - name: id
          in: path
          description: ID of exam to fetch
          required: true
          type: integer
          format: int64
      responses:
        204:
          description: "No content"
        404:
          description: "Invalid id"
        401:
          description: "Unauthorized"
          
  /home/assignments:
    get:
      tags:
      - "assignments"
      summary: "Gets a list of the avaiable assignments"
      description: "The resource shows all possible assignments that a student can take. It requires the use of the token provided after the login as parameter of the request."
      operationId: "getAssignments"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "object"
            properties:
              id:
                type: "integer"
              name:
                type: "string"
              data_inizio:
                type: "string"
              data_fine:
                type: "string"
        404:
          description: "Server not found"
        401:
          description: "Unauthorized"
    post:
      tags:
      - "assignments"
      summary: "Adds a new assignment to the list"
      description: "The post action can be done only by a teacher, infact if a student tries to add a new assignment he will be blocked. It requires in the body the name of the assignment, the start date and the deadline."
      operationId: "postAssignments"
      produces:
      - "application/json"
      responses:
        201:
          description: "Successful operation"
          schema:
            type: "object"
            properties:
              id:
                type: "integer"
              name:
                type: "string"
              data_inizio:
                type: "string"
              data_fine:
                type: "string"
        404:
          description: "Server not found"
        400:
          description: "Bad syntax: missing parameters"
        401:
          description: "Unauthorized"
          
  /home/assignments/{id}:
    get:
      tags:
      - "assignments"
      summary: "Gets a specific assignment"
      description: "The resource shows the specific assignment identified by the field id. It requires the use of the token provided after the login as parameter of the request."
      operationId: "getAssignmentsId"
      produces:
      - "application/json"
      parameters:
        - name: id
          in: path
          description: ID of assignment to fetch
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "object"
            properties:
              id:
                type: "integer"
              name:
                type: "string"
              data_inizio:
                type: "string"
              data_fine:
                type: "string"
        404:
          description: "Server not found"
        401:
          description: "Unauthorized"
    put:
      tags:
      - "assignments"
      summary: "Modifies an existing assignment"
      description: "The put action can be done only by a teacher, infact if a student tries to modify an assignment he will be blocked. It requires in the body the name of the assignment, the start date and the deadline."
      operationId: "putAssignmentsId"
      produces:
      - "application/json"
      parameters:
        - name: id
          in: path
          description: ID of assignment to fetch
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "object"
            properties:
              id:
                type: "integer"
              name:
                type: "string"
              data_inizio:
                type: "string"
              data_fine:
                type: "string"
        404:
          description: "Server not found"
        400:
          description: "Bad syntax: missing parameters"
        401:
          description: "Unauthorized"
    delete:
      tags: 
      - "assignments"
      summary: "Deletes a specific assignment"
      description: "The delete action can be done only by a teacher, infact if a student tries to delete an assignment he will be blocked. Given the id of the choosen assignment, the system will delete it from the existing assignments."
      operationId: "deleteAssignmentsId"
      produces:
      - "application/json"
      parameters:
        - name: id
          in: path
          description: ID of assignmet to fetch
          required: true
          type: integer
          format: int64
      responses:
        204:
          description: "No content"
        404:
          description: "Invalid id"
        401:
          description: "Unauthorized"
          
  /home/students:
      get:
        tags:
        - "students"
        summary: "Gets a list of the avaiable students"
        description: "The resource shows all the students registered to the system. It requires the use of the token provided after the login as parameter of the request."
        operationId: "getStudents"
        produces:
        - "application/json"
        responses:
          200:
            description: "Successful operation"
            schema:
              type: "object"
              properties:
                id:
                  type: "integer"
                name:
                  type: "string"
                surname:
                  type: "string"
                password:
                  type: "string"
          404:
            description: "Server not found"
          401:
            description: "Unauthorized"
      post:
        tags:
        - "students"
        summary: "Adds a new student to the list"
        description: "The post action can be done only by a teacher, infact if a student tries to add a new student he will be blocked. It requires in the body the name of the student, the surname and the password."
        operationId: "postStudents"
        produces:
        - "application/json"
        responses:
          201:
            description: "Successful operation"
            schema:
              type: "object"
              properties:
                id:
                  type: "integer"
                name:
                  type: "string"
                surname:
                  type: "string"
                password:
                  type: "string"
          404:
            description: "Server not found"
          400:
            description: "Bad syntax: missing parameters"
          401:
            description: "Unauthorized"
            
  /home/students/{id}:
    get:
      tags:
      - "students"
      summary: "Gets a specific student"
      description: "The resource shows the specific student identified by the field id. It requires the use of the token provided after the login as parameter of the request."
      operationId: "getStudentsId"
      produces:
      - "application/json"
      parameters:
        - name: id
          in: path
          description: ID of student to fetch
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "object"
            properties:
              id:
                type: "integer"
              name:
                type: "string"
              surname:
                  type: "string"
              password:
                  type: "string"
        404:
          description: "Server not found"
        401:
          description: "Unauthorized"
    put:
      tags:
      - "students"
      summary: "Modifies an existing student"
      description: "The put action can be done only by a teacher, infact if a student tries to modify another student he will be blocked. It requires in the body the name of the student, the surname and the password."
      operationId: "putStudentsId"
      produces:
      - "application/json"
      parameters:
        - name: id
          in: path
          description: ID of student to fetch
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "object"
            properties:
              id:
                type: "integer"
              name:
                type: "string"
              surname:
                  type: "string"
              password:
                  type: "string"
        404:
          description: "Server not found"
        400:
          description: "Bad syntax: missing parameters"
        401:
          description: "Unauthorized"
    delete:
      tags: 
      - "students"
      summary: "Deletes a specific student"
      description: "The delete action can be done only by a teacher, infact if a student tries to delete another student he will be blocked. Given the id of the choosen student, the system will delete it from the existing students."
      operationId: "deleteStudentsId"
      produces:
      - "application/json"
      parameters:
        - name: id
          in: path
          description: ID of student to fetch
          required: true
          type: integer
          format: int64
      responses:
        204:
          description: "No content"
        404:
          description: "Invalid id"
        401:
          description: "Unauthorized"

  /home/professors:
    get:
      tags:
      - "professors"
      summary: "Gets a list of the avaiable professors"
      description: "The resource shows all the professors registered to the system. It requires the use of the token provided after the login as parameter of the request."
      operationId: "getProfessors"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "object"
            properties:
              id:
                type: "integer"
              name:
                type: "string"
              surname:
                type: "string"
              password:
                type: "string"
        404:
          description: "Server not found"
        401:
          description: "Unauthorized"
    post:
      tags:
      - "professors"
      summary: "Adds a new professor to the list"
      description: "The post action can be done only by a teacher, infact if a student tries to add a new student he will be blocked. It requires in the body the name of the student, the surname and the password."
      operationId: "postProfessors"
      produces:
      - "application/json"
      responses:
        201:
          description: "Successful operation"
          schema:
            type: "object"
            properties:
              id:
                type: "integer"
              name:
                type: "string"
              surname:
                type: "string"
              password:
                type: "string"
        404:
          description: "Server not found"
        400:
          description: "Bad syntax: missing parameters"
        401:
          description: "Unauthorized"
            
  /home/professors/{id}:
    get:
      tags:
      - "professors"
      summary: "Gets a specific professor"
      description: "The resource shows the specific professor identified by the field id. It requires the use of the token provided after the login as parameter of the request."
      operationId: "getProfessorsId"
      produces:
      - "application/json"
      parameters:
        - name: id
          in: path
          description: ID of professor to fetch
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "object"
            properties:
              id:
                type: "integer"
              name:
                type: "string"
              surname:
                  type: "string"
              password:
                  type: "string"
        404:
          description: "Server not found"
        401:
          description: "Unauthorized"
    put:
      tags:
      - "professors"
      summary: "Modifies an existing professor"
      description: "The put action can be done only by a teacher, infact if a student tries to modify a professor he will be blocked. It requires in the body the name of the professor, the surname and the password."
      operationId: "putProfessorsId"
      produces:
      - "application/json"
      parameters:
        - name: id
          in: path
          description: ID of professor to fetch
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "object"
            properties:
              id:
                type: "integer"
              name:
                type: "string"
              surname:
                  type: "string"
              password:
                  type: "string"
        404:
          description: "Server not found"
        400:
          description: "Bad syntax: missing parameters"
        401:
          description: "Unauthorized"
    delete:
      tags: 
      - "professors"
      summary: "Deletes a specific professor"
      description: "The delete action can be done only by a teacher, infact if a student tries to delete a professor he will be blocked. Given the id of the choosen professor, the system will delete it from the existing professors."
      operationId: "deleteProfessorsId"
      produces:
      - "application/json"
      parameters:
        - name: id
          in: path
          description: ID of professor to fetch
          required: true
          type: integer
          format: int64
      responses:
        204:
          description: "No content"
        404:
          description: "Invalid id"
        401:
          description: "Unauthorized"